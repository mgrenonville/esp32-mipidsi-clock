import { HorizontalBox, VerticalBox, Button, Spinner } from "std-widgets.slint";
import "assets/editundo.ttf";

import { Globals, WifiState } from "common.slint";
export { Globals }


component Monster inherits Rectangle {
    in property <bool> visible_on_screen: true;
    in property <image> source;
    clip: true;
    height: img.height;
    // border-width: 1px;
    // border-color: black;
    states [
        visible when visible_on_screen: {
            img.y: 0px;
        }
        not_visible when !visible_on_screen: {
            img.y: img.height;
        }
    ]
    img := Image {
        horizontal-tiling: ImageTiling.none;
        image-rendering: ImageRendering.pixelated;
        source: source;
        visible: true;
        animate y {
            easing: linear;
            duration: 500ms;
        }
    }
    // border-radius: root.width / 2;
}

export component Recipe inherits Window {
    default-font-family: "Edit Undo BRK";
    always-on-top: false;
  
    height: 240px;
    width: 240px;
    states [
        left-aligned when Globals.counter > 0: {
            // circle1.x: 0px;
            // circle1.y: 40px;
            // circle2.x: 0px;
            // circle2.y: 0px;
            circle2.visible_on_screen: false;
            circle1.source: @image-url("./img/test-pyxelate/test-factor-20-palette-16.png");
            circle2.source: @image-url("./img/salameche-left.png");
            // in {
            //     animate circle1.x, circle2.x {
            //         duration: 750ms;
            //         easing: ease-in-out-circ;
            //     }
            //     animate circle1.y, circle2.y {
            //         duration: 250ms;
            //         easing: ease-in-out-circ;
            //     }
            // }
            // out {
            //     animate circle1.x, circle2.x {
            //         duration: 750ms;
            //         easing: ease-in-out-circ;
            //     }
            //     animate circle1.y, circle2.y {
            //         duration: 250ms;
            //         easing: ease-in-out-circ;
            //     }
            // }
        }
        right-aligned when Globals.counter <= 0: {
            circle1.source: @image-url("./img/test-pyxelate/test-factor-20-palette-16.png");
            circle2.source: @image-url("./img/salameche-right.png");
            // circle1.x: 220px;
            // circle1.y: 70px;
            // circle2.x: 220px;
            // circle2.y: 00px;
            circle2.visible_on_screen: true;
        }
    ]

    VerticalLayout {

        Image {
            horizontal-tiling: ImageTiling.none;
            image-fit: ImageFit.fill;
            source: @image-url("./img/background_2.png");
            // image-fit default is `contain` when in layout, preserving aspect ratio
            Rectangle {
                
                // background: root.background.darker(20%);
                width: 240px;
                x: 0px;
                y: 139px;
                height: 100px;
                circle1 := Monster {
                    y: 23px;
                    x: 108px;
                    width: 57px;
                    clip: true;
                    visible_on_screen: Globals.show_monsters;
                    // height: 44px;
                }

                circle2 := Monster {
                    x: 91px;
                    y: 33px;
                    width: 21px;
            
                    // height: 18px;
                }
            }
        }


    }

    VerticalBox {
        HorizontalBox {
            max-height: self.min-height;

            Text {
                font-family: "Edit Undo BRK";
                font-size: 72px;
                text: Globals.name;
            }
        }
    }

    Image {
        source: @image-url("img/wifi.png");
        x: parent.height - self.height - 2px;
        y: parent.width - self.width - 2px;
        states [
            not_running when Globals.wifi_state == WifiState.STARTING: {
                colorize: red;
            }
            link_up when Globals.wifi_state == WifiState.LINK-UP: {
                colorize: darkorange;
            }
            ok when Globals.wifi_state == WifiState.OK: {
                colorize: darkblue;
            }
        ]
    }
}
